#include <iostream>
#include <sstream>

template<typename T>
void concatenateArrays(const T arr1[], const T arr2[], T result[]) {
    for (int i = 0; i < 3; ++i) {
        result[i] = arr1[i] + arr2[i];
    }
}

template<typename T>
void displayConcatenatedArray(const T result[]) {
    std::cout << "Concatenated array: ";
    for (int i = 0; i < 3; ++i) {
        std::cout << result[i] << " ";
    }
    std::cout << std::endl;
}

template <typename T>
void concatenateStrings(const T& s1, const T& s2, const T& delimiter, T& result) {
    std::stringstream ss;
    ss << s1 << delimiter << s2;
    result = ss.str();
}

template <typename T>
void displayConcatenatedString(const T& result) {
    std::cout << "Concatenated string: " << result << std::endl;
}

int main() {
    int arr1[3], arr2[3], resultArr[3];
    std::string s1, s2, delimiter, resultString;

    // Input array elements
    for (int i = 0; i < 3; ++i) {
        std::cin >> arr1[i];
    }

    // Input array elements
    for (int i = 0; i < 3; ++i) {
        std::cin >> arr2[i];
    }

    // Input strings
    std::cin >> s1 >> s2;

    // Input delimiter
    std::cin >> delimiter;

    // Concatenate arrays
    concatenateArrays(arr1, arr2, resultArr);

    // Display concatenated array
    displayConcatenatedArray(resultArr);

    // Concatenate strings with delimiter
    concatenateStrings(s1, s2, delimiter, resultString);

    // Display concatenated string
    displayConcatenatedString(resultString);

    return 0;
}
